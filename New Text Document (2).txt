def getFourCornersForContour(contours):
    minLL = np.min(contours[0], 0)
    minLLX = 1000000
    minLLY = 1000000
    maxUR = np.max(contours[0], 0)
    maxURX = 0
    maxURY = 0
    for c in contours:
        [ll, ur] = np.min(c, 0), np.max(c, 0)  # getting the two points
        if ll[0][1] < minLLY:
            minLLY = ll[0][1]
        if ll[0][0] < minLLX:
            minLLX = ll[0][0]
        if ur[0][0] > maxURX:
            maxURX = ur[0][0]
        if ur[0][1] > maxURY:
            maxURY = ur[0][1]
        minLL[0][0] = minLLX
        minLL[0][1] = minLLY
        maxUR[0][0] = maxURX
        maxUR[0][1] = maxURY
        wh = maxUR - minLL  # getting the width and the height
        (x, y, w, h) = minLL[0][0], minLL[0][1], wh[0][0], wh[0][1]
        result = (x, y, w, h)
        # When provided with the correct format of the list of bounding_boxes, this section will set all pixels inside boxes in img_with_boxes

    return result, minLLX, minLLY, maxURX, maxURY
from thresholding import *

def getFourCornersForImage(contours, result, minLLX, minLLY, maxURX, maxURY):
    X, Y, width, height = result
    for cont in contours:
        for i in range(len(cont)):
            if cont[i][0][1] == Y:
                x1 = cont[i][0][0]
            if cont[i][0][0] == X:
                y3 = cont[i][0][1]
            if cont[i][0][1] == Y + height:
                x4 = cont[i][0][0]
            if cont[i][0][0] == X + width:
                y2 = cont[i][0][1]

        # countour (rectangle)
    xc1 = minLLX
    yc1 = minLLY
    xc2 = maxURX
    yc2 = minLLY
    xc3 = minLLX
    yc3 = maxURY
    xc4 = maxURX
    yc4 = maxURY

    # of the image
    y1 = yc1
    x2 = xc2
    x3 = xc3
    y4 = yc4

    A = [[xc1, yc1, 1, 0, 0, 0, -xc1 * x1, -yc1 * x1],
         [0, 0, 0, xc1, yc1, 1, -xc1 * y1, -yc1 * y1],
         [xc2, yc2, 1, 0, 0, 0, -xc2 * x2, -yc2 * x2],
         [0, 0, 0, xc2, yc2, 1, -xc2 * y2, -yc2 * x2],
         [xc3, yc3, 1, 0, 0, 0, -xc3 * x3, -yc3 * x3],
         [0, 0, 0, xc3, yc3, 1, -xc3 * y3, -yc3 * y3],
         [xc4, yc4, 1, 0, 0, 0, -xc4 * x4, -yc4 * x4],
         [0, 0, 0, xc4, yc4, 1, -xc4 * y4, -yc4 * y4]]

    B = [[x1], [y1], [x2], [y2], [x3], [y3], [x4], [y4]]
    return A, B


def isRotated(binary_Image, his):
    h11, h12, h13, h21, h22, h23, h31, h32, h33 = his
    matrix = np.array([
        [h11, h12, h13],
        [h21, h22, h23],
        [h31, h32, h33]])
    kernel2 = np.array([
        [0, 0, 0],
        [1, 1, 1],
        [0, 0, 0]], np.uint8)
    binary_image = binary_Image.astype(np.uint8)
    binary_image_temp = np.invert(binary_image * 255)
    erosin_image = cv2.erode(binary_image_temp, kernel2, iterations=15)
    image_histogram = cv2.calcHist([erosin_image], [0], None, [256], [0, 256])
    tf_img = binary_Image
    print(image_histogram[0][0]/image_histogram[255][0])
    if (image_histogram[0][0]/image_histogram[255][0] > 30):
        tform = skimage.transform.ProjectiveTransform(matrix=matrix)
        tf_img = skimage.transform.warp(binary_Image, tform)
    return tf_img

def Transform(binary_Image):
    kernel = np.ones((5, 5))
    binary_image_temp = binary_Image.astype(np.uint8)
    binary_image_temp = np.invert(binary_image_temp * 255)
    imgDial = cv2.dilate(binary_image_temp, kernel, iterations=2)  # APPLY DILATION
    imgThreshold = cv2.erode(imgDial, kernel, iterations=1)  # APPLY EROSION
    contours, hierarchy = cv2.findContours(imgThreshold, cv2.RETR_EXTERNAL,
                                           cv2.CHAIN_APPROX_SIMPLE)  # FIND ALL CONTOURS
    cv2.drawContours(np.uint8(binary_Image), contours, -1, (0, 255, 0), 1)

    result, minLLX, minLLY, maxURX, maxURY = getFourCornersForContour(contours)
    X, Y, width, height = result

    cv2.rectangle(np.uint8(binary_Image), (int(minLLX), int(minLLY)), (int(maxURX), int(maxURY)), (0, 255, 0), 2)
    A, B = getFourCornersForImage(contours,result, minLLX, minLLY, maxURX, maxURY)

    AT = np.transpose(A)
    S = np.linalg.inv(np.dot(AT, A))
    W = np.dot(AT, B)
    HH = np.dot(S, W)

    h11 = HH[0][0]
    h12 = HH[1][0]
    h13 = HH[2][0]
    h21 = HH[3][0]
    h22 = HH[4][0]
    h23 = HH[5][0]
    h31 = HH[6][0]
    h32 = HH[7][0]
    h33 = 1
    his = [h11, h12, h13, h21, h22, h23, h31, h32, h33]
    return isRotated(binary_Image,his)